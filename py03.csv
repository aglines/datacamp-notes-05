how to see first few rows of df?,df.head() returns first few rows and all columns
how to see all column names in df & what datatype they store,df.info() method
how to see just column names in a dataframe?,df.columns attribute
how see if df col has any null values?,df.info(),will show count of non-null rows in each col - as well as number of rows
how to see how many rows or columns in a df?,df.shape attribute gives (rownumber, colnumber),remember no parenths
how to see min or max value in each col in a df?,df.describe(),shows many diff statistics 
how to see mean, median, or stddev in each col in df?,df.describe()
how to see all values in a dataframe in a 2D numpy array?,df.values,attribute so use dot notation,returns an index object
how to see row numbers or names in a dataframe?,df.index  shows  rows,returns an index object
how to sort values in a dataframe?,df.sort_values("columnName"),   default is ascending
how to change sorting order direction in df,df.sort_values("colName", ascending=False)
how to sort by multiple values,df.sort_values(["colToSortFirst", "colSortSecond"])
how to sort with diff directions for diff cols?,df.sort_values(["colToSortFirst", "colSortSecond"], ascending=[True,False]),pass in a list of bools to the ascending argument
how to see just one dataframe col?,df["colName"]
how to see multiple dataframe cols?,df[["colName1", "colName2"]],the outer sqr brackets subset the df,inner sqr brkts make a list of cols to subset,can use a variable for this list also like colsToSubset
how to filter dataframe rows using a logical condition?,df["colName] > 50,returns a list of booleans for each row whether they meet the condition
how to subset a df to get all rows that meet a condition?,df[df["colName"] > 50 ],or use text - df[df["col3"] == "MainStreet" ]
how to subset df rows for multiple conditions?,use & logicl opertr,(is_over5["size"] > 5 & is_street["addr"] == "MainStreet" ),df[is_over50 & is_MainStreet]
how to filter a dataframe on multiple values of a single column?,IS IN method defines a bool list,is_Red_or_Gray = df["color"].isin(["Red", "Gray"]),df[is_Red_or_Gray]     # then filter using that list
how add new column derived from existing cols?,df["sizeMeters"] = df["sizeCentimeters"] / 100,just calculate

# Print mean weekly_sales by department and type; fill missing values with 0
print(sales.pivot_table(values="weekly_sales",index="type",fill_value=0))



# Make a list of cities to subset on
cities = ["Moscow", "Saint Petersbug"]

# Subset temperatures using square brackets
print(temperatures["city"].isin(cities))

# Subset temperatures_ind using .loc[]
print(temperatures_ind.loc["city"].isin(cities))







# Index temperatures by country & city
temperatures_ind = temperatures.set_index=(["country", "city"])

# List of tuples: Brazil, Rio De Janeiro & Pakistan, Lahore
rows_to_keep = 

[("Brazil", "Rio De Janeiro") , ("Pakistan", "Lahore")]


# Subset for rows to keep

print(temperatures_ind)

#print(temperatures_ind.loc[["Brazil"]])


================
# Use Boolean conditions to subset temperatures for rows in 2010 and 2011
#temperatures.head()
temperatures_bool = temperatures[(temperatures["date"] >= "2010-01-01") & (temperatures["date"] <= "2011-12-31")]

# Set date as the index and sort the index
temperatures_ind = temperatures.set_index("date").sort_index()

# Use .loc[] to subset temperatures_ind for rows in 2010 and 2011
print(  temperatures_ind.loc["2010-01-01":"2011-12-31"]     )

# Use .loc[] to subset temperatures_ind for rows from Aug 2010 to Feb 2011
print(temperatures_ind.loc["2010-08-01":"2011-02-28"])




# Use Boolean conditions to subset temperatures for rows in 2010 and 2011
#temperatures_bool = ____[(____ >= ____) & (____ <= ____)]
temperatures_bool = temperatures[(temperatures["date"] >= "2010-01-01") & (temperatures["date"] <= "2011-12-31")]
print(temperatures_bool)
# Set date as the index and sort the index
temperatures = temperatures.set_index("date").sort_index()
# Use .loc[] to subset temperatures_ind for rows in 2010 and 2011
print(  temperatures_ind.loc["2010-01-01":"2011-12-31"]     )
# Use .loc[] to subset temperatures_ind for rows from Aug 2010 to Feb 2011
print(temperatures_ind.loc["2010-08-01":"2011-02-28"])


# Get 23rd row, 2nd column (index 22, 1)
print(____)
# Use slicing to get the first 5 rows
print(____)
# Use slicing to get columns 3 to 4
print(____)
# Use slicing in both directions at once
print(____)


THEIR ORIG

# Get the worldwide mean temp by year
mean_temp_by_year = temp_by_country_city_vs_year.mean()
#print(mean_temp_by_year.max())
print(mean_temp_by_year)
# Filter for the year that had the highest mean temp
#mean_temp_by_year[mean_temp_by_year == mean_temp_by_year.max()]  
mean_temp_by_year[mean_temp_by_year]
# Get the mean temp by city
#mean_temp_by_city = temp_by_country_city_vs_year.____
# Filter for the city that had the lowest mean temp
#print(mean_temp_by_city[____])



# Import matplotlib.pyplot with alias plt
import matplotlib.pyplot as plt
# Look at the first few rows of data
print(____)
# Get the total number of avocados sold of each size
nb_sold_by_size = ____
# Create a bar plot of the number of avocados sold by size
# Show the plot




# Import matplotlib.pyplot with alias plt
import matplotlib.pyplot as plt

# Look at the first few rows of data
#print(avocados.head())

# Get the total number of avocados sold of each size

#nb_sold_by_size = avocados["nb_sold"].cumsum()

small = avocados[avocados["size"] == "small" ]
smsold = small["nb_sold"].cumsum()

print(smsold)

#print(nb_sold_by_size)

# Create a bar plot of the number of avocados sold by size


# Show the plot
#plt.show()








OK I TOOK THEIR ANSWER

# Histogram of conventional avg_price 
avocados[avocados["type"] == "conventional"]["avg_price"].hist()

# Histogram of organic avg_price
avocados[avocados["type"] == "organic"]["avg_price"].hist()

# Add a legend
plt.legend(["conventional", "organic"])

# Show the plot
plt.show()
